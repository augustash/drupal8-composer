<?php

/**
 * @file
 * Contains exo_media.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_theme().
 */
function exo_media_theme($existing, $type, $theme, $path) {
  return [
    // Render only the content area for entity browser modals.
    'views_view__media_library' => [
      'template' => 'views-view--media-library',
      'base hook' => 'views_view',
    ],
    'views_view_unformatted__media_library' => [
      'template' => 'views-view-unformatted--media-library',
      'base hook' => 'views_view_unformatted',
    ],
    'views_view_table__media_library' => [
      'template' => 'views-view-table--media-library',
      'base hook' => 'views_view_table',
    ],
    'media__media_library' => [
      'template' => 'media--media-library',
      'base hook' => 'media',
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function exo_media_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'exo_media');
  $theme_registry['media__media_library']['path'] = $path . '/templates';
  $theme_registry['media_library_wrapper']['path'] = $path . '/templates';
}

/**
 * Implements hook_form_alter().
 */
function exo_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $info = $form_state->getBuildInfo();
  if (isset($info['base_form_id']) && in_array($info['base_form_id'], ['media_form'])) {
    exo_media_revision_hide($form, $form_state);
  }
}

/**
 * Implements hook_library_info_alter().
 */
function exo_media_library_info_alter(&$libraries, $extension) {
  if ($extension == 'media_library') {
    if (isset($libraries['widget'])) {
      $path = '/' . drupal_get_path('module', 'exo_media');
      $libraries['widget']['css']['component'][$path . '/css/exo-media.library.css'] = ['minified' => TRUE];
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function exo_media_inline_entity_form_entity_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#entity_type'] == 'media') {
    exo_media_revision_hide($form, $form_state);
  }
}

/**
 * Hide any revision field that exists.
 */
function exo_media_revision_hide(&$form, FormStateInterface $form_state) {
  $form['revision']['#access'] = FALSE;
  $form['revision_log_message']['#access'] = FALSE;
  $form['advanced']['#access'] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function exo_media_media_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] == 'media_library') {
    $build['#attributes']['class'][] = 'exo-media-preview';
  }
}

/**
 * Given an entity, find the best image file entity.
 */
function exo_media_smart_image(ContentEntityInterface $entity) {
  $fieldnames = ['field_banner', 'field_image', 'field_body'];
  foreach ($fieldnames as $fieldname) {
    if ($entity->hasField($fieldname)) {
      $image = exo_media_smart_image_find($entity->get($fieldname));
      if ($image) {
        return $image;
      }
    }
  }
  return NULL;
}

/**
 * Given a field, locate an image field.
 */
function exo_media_smart_image_find(FieldItemListInterface $field, $path = []) {
  if (!$field->isEmpty()) {
    switch ($field->getFieldDefinition()->getType()) {
      case 'entity_reference_revisions':
      case 'entity_reference':
        $subpath = $path;
        $subpath[] = $field->getName() . ':0:entity';
        $entity = $field->first()->entity;
        if ($entity && $entity instanceof ContentEntityInterface) {
          $fields = $entity->getFields(FALSE);
          uasort($fields, function ($a, $b) {
            return substr($a->getName(), -3) === '_fg' ? -1 : 1;
          });
          foreach ($fields as $subfield) {
            $image = exo_media_smart_image_find($subfield, $subpath);
            if ($image) {
              return $image;
            }
          }
        }
        break;

      case 'image':
        return [
          'fieldname' => $field->getName(),
          'entity' => $field->getEntity(),
          'path' => $path,
        ];
    }
  }
  return NULL;
}

/**
 * Implements hook_page_attachments_alter().
 */
function exo_media_page_attachments_alter(array &$attachments) {
  if (isset($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as $key => $items) {
      foreach ($items as $key1 => $item) {
        if (isset($item['#attributes']['content']) && strpos($item['#attributes']['content'], '?h=') !== FALSE) {
          $attachments['#attached']['html_head'][$key][$key1]['#attributes']['content'] = preg_replace('/\?h=[a-z0-9]+\&/', '?', $item['#attributes']['content']);
        }
      }
    }
  }
}
