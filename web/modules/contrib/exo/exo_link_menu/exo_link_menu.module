<?php

/**
 * @file
 * Contains exo_link_menu.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\exo_icon\ExoIconIconize;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;

/**
 * Implements hook_entity_base_field_info_alter().
 */
function exo_link_menu_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'menu_link_content') {
    $config = \Drupal::config('exo_link_menu.config');
    $fields['link']->setDisplayOptions('form', [
      'type' => 'exo_link_menu',
      'weight' => -2,
      'settings' => [
        'target' => !empty($config->get('target')),
        'class' => !empty($config->get('class')),
      ],
    ]);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function exo_link_menu_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter') {
    unset($implementations['menu_ui']);
    // Move exo_link_menu_form_node_form_alter() to the end of the list.
    $group = $implementations['exo_link_menu'];
    unset($implementations['exo_link_menu']);
    $implementations['exo_link_menu'] = $group;
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function exo_link_menu_menu_links_discovered_alter(&$links) {
  $links['user.logout']['class'] = 'Drupal\exo_link_menu\ExoLinkMenuLoginLogoutMenuLink';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function exo_link_menu_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (function_exists('menu_ui_form_node_form_alter')) {
    menu_ui_form_node_form_alter($form, $form_state, $form_id);
    if (isset($form['menu'])) {
      $node = $form_state->getFormObject()->getEntity();
      $defaults = menu_ui_get_menu_link_defaults($node);
      $options = [];
      if ($defaults['entity_id']) {
        $menu = MenuLinkContent::load($defaults['entity_id']);
        $options = $menu->get('link')->first()->get('options')->getValue();
      }
      $config = \Drupal::config('exo_link_menu.config');
      $form['menu']['link']['title']['#weight'] = -2;
      $form['menu']['link']['options']['#tree'] = TRUE;
      $form['menu']['link']['options']['#weight'] = -1;
      $form['menu']['link']['options']['attributes']['#tree'] = TRUE;
      $form['menu']['link']['options']['attributes']['data-icon'] = [
        '#type' => 'exo_icon',
        '#title' => t('Icon'),
        '#default_value' => isset($options['attributes']['data-icon']) ? $options['attributes']['data-icon'] : NULL,
        '#packages' => $config->get('packages'),
        '#access' => \Drupal::currentUser()->hasPermission('use exo link menu'),
      ];
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          if (($key = array_search('menu_ui_form_node_form_submit', $form['actions'][$action]['#submit'])) !== FALSE) {
            $form['actions'][$action]['#submit'][$key] = 'exo_link_menu_menu_ui_form_node_form_submit';
          }
        }
      }
    }
  }
}

/**
 * Form submission handler for menu item field on the node form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @see menu_ui_form_node_form_submit()
 */
function exo_link_menu_menu_ui_form_node_form_submit(array $form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!$form_state->isValueEmpty('menu')) {
    $values = $form_state->getValue('menu');
    if (empty($values['enabled'])) {
      if ($values['entity_id']) {
        $entity = MenuLinkContent::load($values['entity_id']);
        $entity->delete();
      }
    }
    elseif (trim($values['title'])) {
      // Decompose the selected menu parent option into 'menu_name' and
      // 'parent', if the form used the default parent selection widget.
      if (!empty($values['menu_parent'])) {
        list($menu_name, $parent) = explode(':', $values['menu_parent'], 2);
        $values['menu_name'] = $menu_name;
        $values['parent'] = $parent;
      }
      _exo_link_menu_menu_ui_node_save($node, $values);
    }
  }
}

/**
 * Helper function to create or update a menu link for a node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param array $values
 *   Values for the menu link.
 *
 * @see _menu_ui_node_save()
 */
function _exo_link_menu_menu_ui_node_save(NodeInterface $node, array $values) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if (!empty($values['entity_id'])) {
    $entity = MenuLinkContent::load($values['entity_id']);
    if ($entity->isTranslatable()) {
      if (!$entity->hasTranslation($node->language()->getId())) {
        $entity = $entity->addTranslation($node->language()->getId(), $entity->toArray());
      }
      else {
        $entity = $entity->getTranslation($node->language()->getId());
      }
    }
  }
  else {
    // Create a new menu_link_content entity.
    $entity = MenuLinkContent::create([
      'link' => ['uri' => 'entity:node/' . $node->id()],
      'langcode' => $node->language()->getId(),
    ]);
    $entity->enabled->value = 1;
  }

  $entity->title->value = trim($values['title']);
  $entity->description->value = trim($values['description']);

  // Save link attributes as necessary.
  $link = $entity->link->first()->getValue();
  $link['options'] += ['attributes' => []];
  $link['options']['attributes'] = array_filter($values['options']['attributes']) + $link['options']['attributes'];
  $entity->link->first()->setValue($link);

  $entity->menu_name->value = $values['menu_name'];
  $entity->parent->value = $values['parent'];
  $entity->weight->value = isset($values['weight']) ? $values['weight'] : 0;
  $entity->save();
}

/**
 * Implements hook_preprocess_menu().
 */
function exo_link_menu_preprocess_menu(&$variables) {
  $variables['items'] = _exo_link_menu_preprocess_menu_items($variables['items']);
}

/**
 * Helper function to iterate over each menu item and utilize icon.
 */
function _exo_link_menu_preprocess_menu_items($items) {
  foreach ($items as &$item) {
    $options = $item['url']->getOptions();
    if (!empty($options['attributes']['data-icon']) && !empty($item['title'])) {
      $position = isset($options['attributes']['data-icon-position']) ? $options['attributes']['data-icon-position'] : 'before';
      $item['title'] = ExoIconIconize::iconize($item['title'])->setIcon($options['attributes']['data-icon'])->setIconPosition($position)->render();
      $item['url']->setOptions($options);
    }
    unset($options['attributes']['data-icon']);
    if (!empty($options['attributes']['data-class'])) {
      $options['attributes'] += ['class' => []];
      $classes = explode(' ', $options['attributes']['data-class']);
      $options['attributes']['class'] = array_merge($options['attributes']['class'], $classes);
      foreach ($classes as $class) {
        $item['attributes']->addClass($class . '-wrapper');
      }
    }
    unset($options['attributes']['data-class']);
    if (!empty($options['attributes']['data-target'])) {
      $options['attributes']['target'] = $options['attributes']['data-target'];
    }
    unset($options['attributes']['data-target']);
    if (!empty($item['below'])) {
      $item['below'] = _exo_link_menu_preprocess_menu_items($item['below']);
    }
    $item['url']->setOptions($options);
  }
  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function exo_link_menu_form_menu_link_edit_alter(&$form, FormStateInterface $form_state, $form_id) {
  $options = $form_state->getBuildInfo()['args'][0]->getOptions();
  $config = \Drupal::config('exo_link_menu.config');
  $form['path']['link']['data-icon'] = [
    '#type' => 'exo_icon',
    '#title' => t('Icon'),
    '#default_value' => isset($options['attributes']['data-icon']) ? $options['attributes']['data-icon'] : NULL,
    '#packages' => $config->get('packages'),
    '#access' => \Drupal::currentUser()->hasPermission('use exo link menu'),
  ];
  if (!empty($config->get('target'))) {
    $form['path']['link']['data-target'] = [
      '#type' => 'checkbox',
      '#title' => t('Open link in new window'),
      '#description' => t('If selected, the menu link will open in a new window/tab when clicked.'),
      '#default_value' => isset($options['attributes']['data-target']) ? $options['attributes']['data-target'] : NULL,
      '#return_value' => '_blank',
    ];
  }
  if (!empty($config->get('class'))) {
    $form['path']['link']['data-class'] = [
      '#type' => 'textfield',
      '#title' => t('CSS classes'),
      '#description' => t('Enter space-separated CSS class names that will be added to the link.'),
      '#default_value' => isset($options['attributes']['data-class']) ? $options['attributes']['data-class'] : NULL,
      '#return_value' => '_blank',
    ];
  }
  $form['#submit'][] = '_exo_link_menu_form_menu_link_edit_alter_submit';
}

/**
 * Process the submitted form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _exo_link_menu_form_menu_link_edit_alter_submit(array $form, FormStateInterface $form_state) {
  $menu_link_id = $form_state->getValue('menu_link_id');
  if (!empty($menu_link_id)) {
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    $options = $form_state->getBuildInfo()['args'][0]->getOptions();
    foreach (['icon', 'target', 'class'] as $key) {
      $options['attributes']['data-' . $key] = $form_state->getValue('data-' . $key);
    }
    $menu_link_manager->updateDefinition($menu_link_id, ['options' => $options]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function exo_link_menu_form_menu_link_content_menu_link_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\menu_link_content\Form\MenuLinkContentForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  $entity = $form_object->getEntity();
  $account = \Drupal::currentUser();
  $config = \Drupal::config('exo_link_menu.config');

  if ($config->get('spacers')) {
    // Set fields as non-required. We will check them in validation. We do this
    // because when spacer is enabled we set these dynamically but FormValidator
    // already checked #required and returns an error at this stage.
    $form['title']['widget'][0]['value']['#required'] = FALSE;
    $form['link']['widget'][0]['uri']['#required'] = FALSE;
    $spacer_enabled = FALSE;
    if (!$entity->isNew()) {
      $options = $entity->getUrlObject()->getOptions();
      $spacer_enabled = !empty($options['spacer']);
    }
    $html_id = Html::getUniqueId('exo-link-spacer');
    $form['spacer'] = [
      '#type' => 'checkbox',
      '#title' => t('Show as spacer'),
      '#description' => t('If selected and this menu link will be used as a spacer between other links.'),
      '#default_value' => $spacer_enabled,
      '#id' => $html_id,
      '#weight' => -10,
    ];
    $form['spacer']['widget']['value']['#id'] = $html_id;
    foreach ([
      'title',
      'link',
      'expanded',
      'description',
    ] as $key) {
      $form[$key]['#states'] = [
        'invisible' => [
          '#' . $html_id => ['checked' => TRUE],
        ],
      ];
    }
    array_unshift($form['#validate'], 'exo_link_menu_form_menu_link_content_menu_link_content_form_validate');
  }

  if (isset($form['link']['widget'][0]['options']['attributes']) && $account->id() != 1) {
    foreach ([
      'data-icon' => 'icon',
      'data-icon-position' => 'icon',
      'target' => 'target',
      'class' => 'class',
    ] as $key => $permission) {
      if (isset($form['link']['widget'][0]['options']['attributes'][$key])) {
        $form['link']['widget'][0]['options']['attributes'][$key]['#access'] = $account->hasPermission('add exo link menu ' . $permission);
      }
    }
    $form['link']['widget'][0]['options']['#access'] = !empty(Element::getVisibleChildren($form['link']['widget'][0]['options']['attributes']));
  }
}

/**
 * Validation callback for menu link form.
 */
function exo_link_menu_form_menu_link_content_menu_link_content_form_validate(&$form, FormStateInterface $form_state) {
  if ($form_state->getValue(['spacer'], FALSE)) {
    $form_state->setValue(['title', 0, 'value'], 'Spacer');
    $form_state->setValue(['link', 0, 'uri'], '#');
    $form_state->setValue(['link', 0, 'options', 'spacer'], TRUE);
  }
  else {
    if (!$form_state->getValue(['title', 0, 'value'], FALSE)) {
      $form_state->setError($form['title']['widget'][0]['value'], t('@name field is required.', ['@name' => $form['title']['widget'][0]['value']['#title']]));
    }
    if (!$form_state->getValue(['link', 0, 'uri'], FALSE)) {
      $form_state->setError($form['link']['widget'][0]['uri'], t('@name field is required.', ['@name' => $form['link']['widget'][0]['uri']['#title']]));
    }
  }
}
