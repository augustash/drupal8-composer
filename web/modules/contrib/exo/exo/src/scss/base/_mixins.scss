/////////////////////
// Font Face
// Generates the proper font styles from a linked font file(s)
// ---------
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
    font-display: swap;
  }
}

/////////////////////
// Use icon

@function add-backslash($character) {
  @return unquote('"') + unquote(str-insert($character, '\\', 1)) + unquote('"');
}

@mixin exo-icon($package, $hex, $position: before) {
  &:#{$position} {
    -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes
    -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes
    font-family: 'icon-#{$package}' !important; // stylelint-disable-line declaration-no-important
    display: inline-block;
    font-style: normal;
    font-variant: normal;
    font-weight: normal;
    line-height: 1;
    content: add-backslash($hex);
    @content;
  }
}

/////////////////////
// Sass CSS triangle mixin, create any kind of triangles with ease
//
// Use:
// @include triangle(direction,width,height,color);
//
// Example:
// $square: 50px;
// $color: red;
// selector {
// *	 @include triangle(bottomright,$square,$square,$color);
// }
//
// Forked from https://github.com/juanbrujo/triangle-mixin.less
@mixin exo-triangle($direction, $size-h, $size-v, $color) {
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border-style: solid;
  transform: scale(0.9999);
  vertical-align: middle;

  @if $direction == top {
    border-width: 0 $size-v $size-h;
    border-color: transparent transparent $color;
  }
  @if $direction == bottom {
    border-width: $size-v $size-h 0 $size-v;
    border-color: $color transparent transparent;
  }
  @if $direction == left {
    border-width: $size-v $size-h $size-v 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == right {
    border-width: $size-v 0 $size-v $size-h;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topright {
    border-width: 0 $size-h $size-v 0;
    border-color: transparent $color transparent transparent;
  }
  @if $direction == bottomright {
    border-width: 0 0 $size-h $size-v;
    border-color: transparent transparent $color;
  }
  @if $direction == bottomleft {
    border-width: $size-h 0 0 $size-v;
    border-color: transparent transparent transparent $color;
  }
  @if $direction == topleft {
    border-width: $size-h $size-v 0 0;
    border-color: $color transparent transparent;
  }
  @content;
}

/////////////////////
// Breakpoints
// --------
/// Iterates through breakpoints defined in `$breakpoint-classes` and prints the CSS inside the mixin at each breakpoint's media query. Use this with the grid, or any other component that has responsive classes.
///
/// @param {Boolean} $small [true] - If `false`, the mixin will skip the `small` breakpoint. Use this with components that don't prefix classes with `small-`, only `medium-` and up.
/// @param {Boolean} $auto-insert-breakpoints [true] - If `false`, the mixin will iterate over breakpoints without doing the media query itself. Useful for more complex media query generation as in the margin grid.
@mixin exo-each-breakpoint($small: true, $auto-insert-breakpoints: true) {
  $list: $breakpoint-classes;

  @if not $small {
    $list: sl-remove($list, $-zf-zero-breakpoint);
  }

  @each $name in $list {
    $old-exo-size: null;
    @if global-variable-exists(exo-size) {
      $old-exo-size: $exo-size;
    }
    $exo-size: $name !global;

    @if $auto-insert-breakpoints {
      @include breakpoint($name) {
        @content;
      }
    }
    @else {
      @content;
    }

    $exo-size: $old-exo-size !global;
  }
}

@mixin exo-progress-throbber() {
  .ajax-progress-throbber {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    background: alpha(theme-black, 0.2) !important;
    z-index: 1000 !important;

    .throbber {
      position: fixed !important;
      top: 50% !important;
      right: 50% !important;
      bottom: 50% !important;
      left: 50% !important;
      width: 16px !important;
      height: 16px !important;
      margin-top: -8px !important;
      margin-left: -8px !important;
      text-align: center !important;
      background-color: color(theme-white) !important;
      background-position: center center !important;
      border-radius: 50% !important;
      padding: $global-padding !important;
    }

    .message {
      display: none;
    }
  }
}

/////////////////////
// Exo Breakpoint Mixin
// ---------
/// Generate the `@content` passed to the mixin with a value `$-zf-bp-value` related to a breakpoint, depending on the `$name` parameter:
/// - For a single value, `$-zf-bp-value` is this value.
/// - For a breakpoint name, `$-zf-bp-value` is the corresponding breakpoint value in `$map`.
/// - For "auto", `$-zf-bp-value` is the corresponding breakpoint value in `$map` and is passed to `@content`, which is made responsive for each breakpoint of `$map`.
/// @param {Number|Array|Keyword} $name [auto] - Single value, breakpoint name, or list of breakpoint names to use. "auto" by default.
/// @param {Number|Map} $map - Map of breakpoints and values or single value to use.
@mixin -exo-breakpoint-value(
  $name: auto,
  $map: null
) {
  @if $name == auto and type-of($map) == 'map' {
    // "auto"
    @each $k, $v in $map {
      @include breakpoint($k) {
        @include -exo-breakpoint-value($v, $map) {
          @content;
        }
      }
    }
  }
  @else {
    // breakpoint name
    @if type-of($name) == 'string' {
      $name: -exo-get-bp-val($map, $name);
    }

    // breakpoint value
    $-exo-bp-value: $name !global;
    @content;
  }
}

/// Removes the focus ring around an element when a mouse input is detected.
@mixin disable-mouse-outline {
  [data-whatinput='mouse'] & {
    outline: 0;
  }
}

/// Applies the micro clearfix hack popularized by Nicolas Gallagher. Include this mixin on a container if its children are all floated, to give the container a proper height.
/// The clearfix is augmented with specific styles to prevent borders in flexbox environments
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack
/// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix
@mixin clearfix {
  &::before,
  &::after {
    display: table;
    content: ' ';
  }

  &::after {
    clear: both;
  }
}

/////////////////////
// Menu Base Mixin
// --------
/// Creates the base styles for a Menu.
@mixin menu-base {
  padding: 0;
  margin: 0;
  list-style: none;
  position: relative;

  li {
    @include disable-mouse-outline;
  }

  a,
  .button {
    line-height: 1;
    text-decoration: none;
    display: block;
    padding: $menu-items-padding;
  }

  // Reset styles of inner elements
  input,
  select,
  a,
  button {
    margin-bottom: 0;
  }

  input {
    display: inline-block;
  }
}

/////////////////////
// Touchscreen Mixin
// --------
/// Apply specific styles based on hover events detected for touchscreen
/// where primary input is not a mouse.
@mixin touchscreen() {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}

/////////////////////
// IE Support Mixin
// --------
/// IE can be super fun and doesn't support some of the stuff we are trying to do.
/// Use this mixin to pass IE specific styles.
@mixin iesupport() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}

/*
* Dotted Border - A SASS mixin to help you increase spacing between the dots of border-style:dotted.
* By @florbraz
* Documentation and examples - github.com/florbraz/Dotted-Border-w-custom-spacing-SCSS-Mixin
* V1.0
*/
@mixin dottedBorder($color: #8f8f8f, $orientation: horizontal, $position: top, $spacing: 5px, $size: 1px) {
  background-position: $position;
  @if $orientation == horizontal {
    background-image: linear-gradient(to right, $color $size/$spacing * 100%, rgba(255,255,255,0) 0%);
    background-size: $spacing $size;
    background-repeat: repeat-x;
  }
  @else {
    background-image: linear-gradient($color $size/$spacing * 100%, rgba(255,255,255,0) 0%);
    background-size: $size $spacing;
    background-repeat: repeat-y;
  }
  .ie9 & {
    border-#{$position}:1px dotted $color;
  }
}
