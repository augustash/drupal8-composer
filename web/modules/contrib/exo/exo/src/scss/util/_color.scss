// Colors
// Retrieve color from $palette map
@function color($color, $palette: $colors, $debug: false) {
  @if $debug == true {
    @debug '--------'; // sass-lint:disable-line no-debug
    @debug 'Color: ' $color; // sass-lint:disable-line no-debug
    @debug 'Palette: ' $palette; // sass-lint:disable-line no-debug
  }
  $palette: map-merge($global-colors, $palette);
  $base: nth($color, 1);
  @if $base == 'inherit' {
    @return $base;
  }
  $adjust: if(length($color) > 1, nth($color, 2), ());
  @if (length($adjust) > 0) {
    @return color-with-adjustments($color, $debug: $debug);
  }
  // Correctly set $color variable:
  @if map-has-key($palette, $color) {
    // $color is in $palette, set variable = map-value
    $color: map-get($palette, $color);
    $base: nth($color, 1);
    $adjust: if(length($color) > 1, nth($color, 2), ());
    // Recursive check
    $color: if(map-has-key($palette, $base), color($base), $base);
    // Adjustments
    $color: color-process-adjustments($color, $adjust);
    @return $color;
  }
  @else {
    @if type-of($color) != color {
      // $color is not in $color and $color is not a color
      @error 'Invalid color "#{$color}".';
    }
  }
}

@function color-with-adjustments($color-with-adjustments, $debug: false) {
  $color: color(nth($color-with-adjustments, 1));
  $adjust: if(length($color-with-adjustments) > 1, nth($color-with-adjustments, 2), ());
  $color: color-process-adjustments($color, $adjust, $debug: $debug);
  @if $debug == true {
    @debug '--------'; // sass-lint:disable-line no-debug
    @debug 'Color with adjustments: ' $color-with-adjustments; // sass-lint:disable-line no-debug
    @debug 'Color: ' nth($color-with-adjustments, 1); // sass-lint:disable-line no-debug
    @debug 'Adjust: ' $adjust; // sass-lint:disable-line no-debug
  }
  @return $color;
}

// Adjust colors.
// (darken: 5%, lighten: 10%)
@function color-process-adjustments($color, $adjust, $debug: false) {
  @each $function, $value in $adjust {
    @if $debug == true {
      @debug '--------'; // sass-lint:disable-line no-debug
      @debug 'Function: ' $function; // sass-lint:disable-line no-debug
      @debug 'Value: ' $value; // sass-lint:disable-line no-debug
      @debug 'Color: ' $color; // sass-lint:disable-line no-debug
    }
    @if function-exists($function) {
      $function: get-function($function);
      @if $value != '' {
        $color: call($function, $color, $value...);
      }
      @else {
        $color: call($function, $color);
      }
      @if $debug == true {
        @debug 'Color adjusted: ' $color; // sass-lint:disable-line no-debug
      }
    }
    @else {
      @warn '#{$function} is not a valid color function.';
    }
  }
  @return $color;
}

// Alpha
// Generate an alpha color from $pallet.
@function alpha($color, $amount: 0.5) {
  @if $color == 'inherit' {
    @return $color;
  }
  @if type-of($color) != 'color' {
    $color: color($color);
  }
  @return rgba($color, $amount);
}

@function grey($num) {
  @return lighten(#000, percentage((100 - $num) / 100));
}

@function shadow($num) {
  @return rgba(0, 0, 0, $num / 100);
}

// Smart scale a color up or down for better contrast.
@function color-fix($color1, $color2, $scale-amount: 3%, $threshold: 40%, $tolerance: 0) {
  $color1: color($color1);
  $color2: color($color2);
  $contrast: color-contrast($color1, $color2);
  $current-contrast: 0;
  $scale: $scale-amount;

  @if $contrast > $tolerance {
    @return $color2;
  }

  $darken: lightness($color1) > $threshold;

  @while $current-contrast < $tolerance {
    $current-scale: $scale;
    @if ($current-scale > 100 or $current-scale < -100) {
      @return $color2;
    }
    @if $darken {
      $current-scale: -$current-scale;
    }
    $current-saturation: 0;
    $current-saturation: saturation($color2);
    @if $current-saturation > 1 {
      $current-saturation: -$current-scale;
    }
    $color2: scale-color($color2, $lightness: $current-scale, $saturation: $current-saturation);
    $current-contrast: color-contrast($color1, $color2);
    $scale: $scale + $scale-amount;
  }

  @return $color2;
}

/// Checks the luminance of `$color`.
///
/// @param {Color} $color - Color to check the luminance of.
///
/// @returns {Number} The luminance of `$color`.
@function color-luminance($color) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;
    $rgb: if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));
    $rgba2: append($rgba2, $rgb);
  }

  @return 0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

/// Checks the contrast ratio of two colors.
///
/// @param {Color} $color1 - First color to compare.
/// @param {Color} $color2 - Second color to compare.
///
/// @returns {Number} The contrast ratio of the compared colors.
@function color-contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + 0.05;
  $luminance2: color-luminance($color2) + 0.05;
  $ratio: $luminance1 / $luminance2;

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  $ratio: round($ratio * 10) / 10;

  @return $ratio;
}

/// Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast.
///
/// @param {Color} $base - Color to check luminance.
/// @param {List} $colors [($white, $black)] - Colors to compare.
/// @param {Number} $tolerance [$global-color-pick-contrast-tolerance] - Contrast tolerance.
///
/// @returns {Color} the color from `$colors` (list of colors) that has the most contrast.
@function color-pick-contrast($base, $colors: (color(theme-white), color(theme-black)), $tolerance: $global-color-pick-contrast-tolerance) {
  @if type-of($base) != 'color' {
    $base: color($base);
  }
  $contrast: color-contrast($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current-contrast: color-contrast($base, nth($colors, $i));
    @if ($current-contrast - $contrast > $tolerance) {
      $contrast: color-contrast($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }

  // @if ($contrast-warnings and $contrast < 3) {
  //   @warn 'Contrast ratio of #{$best} on #{$base} is pretty bad, just #{$contrast}';
  // }

  @return $best;
}

/// Shortcut function for returning black/white depending on constrast.
@function color-b-or-w($color) {
  @return color-pick-contrast($color, $tolerance: 10);
}

/// Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness.
///
/// @param {Color} $color - Color to scale.
/// @param {Percentage} $scale [5%] - Amount to scale up or down.
/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.
///
/// @returns {Color} A scaled color.
@function color-scale-inverse($color, $scale: 5%, $threshold: 60%) {
  @if type-of($color) != 'color' {
    $color: color($color);
  }
  @if lightness($color) > $threshold {
    $scale: -$scale;
  }
  @return adjust-color($color, $lightness: $scale);
}

/// Scales a color to be lighter if it's light, or darker if it's dark. Use this function to tint a color appropriate to its lightness.
///
/// @param {Color} $color - Color to scale.
/// @param {Percentage} $scale [5%] - Amount to scale up or down.
/// @param {Percentage} $threshold [40%] - Threshold of lightness to check against.
///
/// @returns {Color} A scaled color.
@function color-scale-direct($color, $scale: 5%, $threshold: 60%) {
  @if type-of($color) != 'color' {
    $color: color($color);
  }
  @if lightness($color) < $threshold {
    $scale: -$scale;
  }
  @return adjust-color($color, $lightness: $scale);
}
